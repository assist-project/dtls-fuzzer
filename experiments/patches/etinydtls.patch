diff --git a/dtls.c b/dtls.c
index fc7016a..d6afca1 100644
--- a/dtls.c
+++ b/dtls.c
@@ -332,39 +332,44 @@ dtls_create_cookie(dtls_context_t *ctx,
    * the buffer size must fit with the default hash algorithm (see
    * implementation of dtls_hmac_context_new()). */
 
-  dtls_hmac_context_t hmac_context;
-  dtls_hmac_init(&hmac_context, ctx->cookie_secret, DTLS_COOKIE_SECRET_LENGTH);
+  for (int i=0; i<*clen; i++) {
+     cookie[i] = 1;
+  }
 
-  dtls_hmac_update(&hmac_context, 
-		   (unsigned char *)&session->addr, session->size);
 
-  /* feed in the beginning of the Client Hello up to and including the
-     session id */
-  e = sizeof(dtls_client_hello_t);
-  e += (*(msg + DTLS_HS_LENGTH + e) & 0xff) + sizeof(uint8);
-  if (e + DTLS_HS_LENGTH > msglen)
-    return dtls_alert_fatal_create(DTLS_ALERT_HANDSHAKE_FAILURE);
+  // dtls_hmac_context_t hmac_context;
+  // dtls_hmac_init(&hmac_context, ctx->cookie_secret, DTLS_COOKIE_SECRET_LENGTH);
 
-  dtls_hmac_update(&hmac_context, msg + DTLS_HS_LENGTH, e);
-  
-  /* skip cookie bytes and length byte */
-  e += *(uint8 *)(msg + DTLS_HS_LENGTH + e) & 0xff;
-  e += sizeof(uint8);
-  if (e + DTLS_HS_LENGTH > msglen)
-    return dtls_alert_fatal_create(DTLS_ALERT_HANDSHAKE_FAILURE);
+  // dtls_hmac_update(&hmac_context,
+	// 	   (unsigned char *)&session->addr, session->size);
 
-  dtls_hmac_update(&hmac_context, 
-		   msg + DTLS_HS_LENGTH + e,
-		   dtls_get_fragment_length(DTLS_HANDSHAKE_HEADER(msg)) - e);
+  // /* feed in the beginning of the Client Hello up to and including the
+  //    session id */
+  // e = sizeof(dtls_client_hello_t);
+  // e += (*(msg + DTLS_HS_LENGTH + e) & 0xff) + sizeof(uint8);
+  // if (e + DTLS_HS_LENGTH > msglen)
+  //   return dtls_alert_fatal_create(DTLS_ALERT_HANDSHAKE_FAILURE);
 
-  len = dtls_hmac_finalize(&hmac_context, buf);
-
-  if (len < *clen) {
-    memset(cookie + len, 0, *clen - len);
-    *clen = len;
-  }
+  // dtls_hmac_update(&hmac_context, msg + DTLS_HS_LENGTH, e);
+
+  // /* skip cookie bytes and length byte */
+  // e += *(uint8 *)(msg + DTLS_HS_LENGTH + e) & 0xff;
+  // e += sizeof(uint8);
+  // if (e + DTLS_HS_LENGTH > msglen)
+  //   return dtls_alert_fatal_create(DTLS_ALERT_HANDSHAKE_FAILURE);
+
+  // dtls_hmac_update(&hmac_context,
+	// 	   msg + DTLS_HS_LENGTH + e,
+	// 	   dtls_get_fragment_length(DTLS_HANDSHAKE_HEADER(msg)) - e);
+
+  // len = dtls_hmac_finalize(&hmac_context, buf);
+
+  // if (len < *clen) {
+  //   memset(cookie + len, 0, *clen - len);
+  //   *clen = len;
+  // }
   
-  memcpy(cookie, buf, *clen);
+  // memcpy(cookie, buf, *clen);
   return 0;
 }
 
diff --git a/tests/dtls-client.c b/tests/dtls-client.c
index 1979721..c799e42 100644
--- a/tests/dtls-client.c
+++ b/tests/dtls-client.c
@@ -23,7 +23,7 @@
 #define DEFAULT_PORT 20220
 
 #define PSK_DEFAULT_IDENTITY "Client_identity"
-#define PSK_DEFAULT_KEY      "secretPSK"
+#define PSK_DEFAULT_KEY      "1234"
 #define PSK_OPTIONS          "i:k:"
 
 #ifdef __GNUC__
@@ -98,8 +98,8 @@ read_from_file(char *arg, unsigned char *buf, size_t max_buf_len) {
 #define PSK_MAXLEN 256
 static unsigned char psk_id[PSK_ID_MAXLEN];
 static size_t psk_id_length = 0;
-static unsigned char psk_key[PSK_MAXLEN];
-static size_t psk_key_length = 0;
+static unsigned char psk_key[] = {0x12, 0x34};
+static size_t psk_key_length = 2;
 
 /* This function is the "key store" for tinyDTLS. It is called to
  * retrieve a key for the given identity within this particular
@@ -193,7 +193,7 @@ read_from_peer(struct dtls_context_t *ctx,
   size_t i;
   for (i = 0; i < len; i++)
     printf("%c", data[i]);
-  return 0;
+  return dtls_write(ctx, session, data, len);
 }
 
 static int
@@ -351,9 +351,9 @@ main(int argc, char **argv) {
 
 #ifdef DTLS_PSK
   psk_id_length = strlen(PSK_DEFAULT_IDENTITY);
-  psk_key_length = strlen(PSK_DEFAULT_KEY);
+  // psk_key_length = strlen(PSK_DEFAULT_KEY);
   memcpy(psk_id, PSK_DEFAULT_IDENTITY, psk_id_length);
-  memcpy(psk_key, PSK_DEFAULT_KEY, psk_key_length);
+  // memcpy(psk_key, PSK_DEFAULT_KEY, psk_key_length);
 #endif /* DTLS_PSK */
 
   while ((opt = getopt(argc, argv, "p:o:v:" PSK_OPTIONS)) != -1) {
diff --git a/tests/dtls-server.c b/tests/dtls-server.c
index 2914d98..1ebc076 100644
--- a/tests/dtls-server.c
+++ b/tests/dtls-server.c
@@ -57,7 +57,7 @@ get_psk_info(struct dtls_context_t *ctx, const session_t *session,
     size_t key_length;
   } psk[3] = {
     { (unsigned char *)"Client_identity", 15,
-      (unsigned char *)"secretPSK", 9 },
+      (unsigned char *)"\x12\x34", 2 },
     { (unsigned char *)"default identity", 16,
       (unsigned char *)"\x11\x22\x33", 3 },
     { (unsigned char *)"\0", 2,
@@ -269,7 +269,7 @@ main(int argc, char **argv) {
   listen_addr.sin6_port = htons(DEFAULT_PORT);
   listen_addr.sin6_addr = in6addr_any;
 
-  while ((opt = getopt(argc, argv, "A:p:v:")) != -1) {
+  while ((opt = getopt(argc, argv, "A:p:v:d")) != -1) {
     switch (opt) {
     case 'A' :
       if (resolve_address(optarg, (struct sockaddr *)&listen_addr) < 0) {
@@ -283,6 +283,9 @@ main(int argc, char **argv) {
     case 'v' :
       log_level = strtol(optarg, NULL, 10);
       break;
+      case 'd' :
+      cb.verify_ecdsa_key = NULL;
+      break;
     default:
       usage(argv[0], dtls_package_version());
       exit(1);
