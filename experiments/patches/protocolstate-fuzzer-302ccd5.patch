diff --git a/pom.xml b/pom.xml
index 1f2ae33..981c75a 100644
--- a/pom.xml
+++ b/pom.xml
@@ -10,8 +10,8 @@
 
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-        <maven.compiler.source>17</maven.compiler.source>
-        <maven.compiler.target>17</maven.compiler.target>
+        <maven.compiler.source>11</maven.compiler.source>
+        <maven.compiler.target>11</maven.compiler.target>
 
         <!-- Version information alphabetically sorted -->
         <automatalib.version>0.11.0</automatalib.version>
@@ -268,7 +268,7 @@
                             <goal>analyze-only</goal>
                         </goals>
                         <configuration>
-                            <failOnWarning>true</failOnWarning>
+                            <failOnWarning>false</failOnWarning>
                             <ignoreUnusedRuntime>true</ignoreUnusedRuntime>
                         </configuration>
                     </execution>
@@ -327,7 +327,6 @@
                <configuration>
                    <showWarnings>true</showWarnings>
                    <compilerArgs>
-                       <arg>-Werror</arg>
                        <arg>-Xlint:all</arg>
                        <arg>-XDcompilePolicy=simple</arg>
                        <arg>-Xplugin:ErrorProne</arg>
diff --git a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/alphabet/AlphabetSerializerException.java b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/alphabet/AlphabetSerializerException.java
index 8fce548..8a0e168 100644
--- a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/alphabet/AlphabetSerializerException.java
+++ b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/alphabet/AlphabetSerializerException.java
@@ -1,13 +1,10 @@
 package com.github.protocolfuzzing.protocolstatefuzzer.components.learner.alphabet;
 
-import java.io.Serial;
-
 /**
  * Exception used by the AlphabetSerializer.
  */
 public class AlphabetSerializerException extends Exception {
 
-    @Serial
     private static final long serialVersionUID = 1L;
 
     /**
diff --git a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/config/RoundLimitReachedException.java b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/config/RoundLimitReachedException.java
index 401b70f..a76abec 100644
--- a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/config/RoundLimitReachedException.java
+++ b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/config/RoundLimitReachedException.java
@@ -1,13 +1,10 @@
 package com.github.protocolfuzzing.protocolstatefuzzer.components.learner.config;
 
-import java.io.Serial;
-
 /**
  * Exception used when the specified round limit has been reached.
  */
 public class RoundLimitReachedException extends RuntimeException {
 
-    @Serial
     private static final long serialVersionUID = 1L;
 
     /** The number of rounds that has been reached. */
diff --git a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/config/TestLimitReachedException.java b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/config/TestLimitReachedException.java
index 12c3c0e..b779d93 100644
--- a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/config/TestLimitReachedException.java
+++ b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/config/TestLimitReachedException.java
@@ -1,13 +1,11 @@
 package com.github.protocolfuzzing.protocolstatefuzzer.components.learner.config;
 
-import java.io.Serial;
 
 /**
  * Exception used when the specified test limit has been reached.
  */
 public class TestLimitReachedException extends RuntimeException {
 
-    @Serial
     private static final long serialVersionUID = 1L;
 
     /** The number of tests that has been reached. */
diff --git a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/config/TimeLimitReachedException.java b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/config/TimeLimitReachedException.java
index c9b4636..f351b25 100644
--- a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/config/TimeLimitReachedException.java
+++ b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/config/TimeLimitReachedException.java
@@ -1,6 +1,5 @@
 package com.github.protocolfuzzing.protocolstatefuzzer.components.learner.config;
 
-import java.io.Serial;
 import java.time.Duration;
 
 /**
@@ -8,7 +7,6 @@ import java.time.Duration;
  */
 public class TimeLimitReachedException extends RuntimeException {
 
-    @Serial
     private static final long serialVersionUID = 1L;
 
     /** The duration that has been exceeded. */
diff --git a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/factory/LearningSetupFactory.java b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/factory/LearningSetupFactory.java
index 3698c93..d57a009 100644
--- a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/factory/LearningSetupFactory.java
+++ b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/factory/LearningSetupFactory.java
@@ -7,6 +7,7 @@ import com.github.protocolfuzzing.protocolstatefuzzer.components.learner.oracles
 import com.github.protocolfuzzing.protocolstatefuzzer.components.sul.mapper.abstractsymbols.AbstractInput;
 import com.github.protocolfuzzing.protocolstatefuzzer.components.sul.mapper.abstractsymbols.AbstractOutput;
 import com.github.protocolfuzzing.protocolstatefuzzer.statefuzzer.testrunner.core.TestParser;
+import com.google.common.collect.Lists;
 import de.learnlib.acex.analyzers.AcexAnalyzers;
 import de.learnlib.algorithms.kv.mealy.KearnsVaziraniMealy;
 import de.learnlib.algorithms.lstar.ce.ObservationTableCEXHandlers;
@@ -26,7 +27,6 @@ import net.automatalib.words.Alphabet;
 import net.automatalib.words.Word;
 
 import java.io.IOException;
-import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
 import java.util.stream.Collectors;
@@ -49,28 +49,28 @@ public class LearningSetupFactory {
         MealyMembershipOracle<AbstractInput, AbstractOutput> sulOracle,
         Alphabet<AbstractInput> alphabet) {
 
-        return switch (config.getLearningAlgorithm()) {
-            case LSTAR ->
-                new ExtensibleLStarMealy<>(alphabet, sulOracle, new ArrayList<>(),
+        switch (config.getLearningAlgorithm()) {
+            case LSTAR:
+                return new ExtensibleLStarMealy<>(alphabet, sulOracle, Lists.newArrayList(),
                     ObservationTableCEXHandlers.CLASSIC_LSTAR, ClosingStrategies.CLOSE_SHORTEST);
 
-            case TTT ->
-                new TTTLearnerMealyBuilder<AbstractInput, AbstractOutput>()
+            case TTT:
+                return new TTTLearnerMealyBuilder<AbstractInput, AbstractOutput>()
                     .withAlphabet(alphabet)
                     .withOracle(sulOracle)
                     .withAnalyzer(AcexAnalyzers.BINARY_SEARCH_FWD)
                     .create();
 
-            case RS ->
-                new ExtensibleLStarMealy<>(alphabet, sulOracle, new ArrayList<>(),
+            case RS:
+                return new ExtensibleLStarMealy<>(alphabet, sulOracle, Lists.newArrayList(),
                     ObservationTableCEXHandlers.RIVEST_SCHAPIRE, ClosingStrategies.CLOSE_SHORTEST);
 
-            case KV ->
-                new KearnsVaziraniMealy<>(alphabet, sulOracle, false, AcexAnalyzers.LINEAR_FWD);
+            case KV:
+                return new KearnsVaziraniMealy<>(alphabet, sulOracle, false, AcexAnalyzers.LINEAR_FWD);
 
-            default ->
+            default:
                 throw new RuntimeException("Learner algorithm " + config.getLearningAlgorithm() + " is not supported");
-        };
+        }
     }
 
     /**
@@ -125,34 +125,34 @@ public class LearningSetupFactory {
         MealyMembershipOracle<AbstractInput, AbstractOutput> sulOracle,
         Alphabet<AbstractInput> alphabet) {
 
-        return switch (algorithm) {
+        switch (algorithm) {
             // simplest method, but doesn't perform well for large models
-            case RANDOM_WALK ->
-                new RandomWalkEQOracle<>(sul, config.getProbReset(), config.getEquivQueryBound(), true, new Random(config.getSeed()));
+            case RANDOM_WALK:
+                return new RandomWalkEQOracle<>(sul, config.getProbReset(), config.getEquivQueryBound(), true, new Random(config.getSeed()));
 
             // Smarter methods: state coverage, trying to distinguish states, etc.
-            case W_METHOD ->
-                new MealyWMethodEQOracle<>(sulOracle, config.getMaxDepth());
+            case W_METHOD:
+                return new MealyWMethodEQOracle<>(sulOracle, config.getMaxDepth());
 
-            case WP_METHOD ->
-                new MealyWpMethodEQOracle<>(sulOracle, config.getMaxDepth());
+            case WP_METHOD:
+                return new MealyWpMethodEQOracle<>(sulOracle, config.getMaxDepth());
 
-            case RANDOM_WP_METHOD ->
-                new RandomWpMethodEQOracle<>(
+            case RANDOM_WP_METHOD:
+                return new RandomWpMethodEQOracle<>(
                     sulOracle, config.getMinLength(), config.getRandLength(),
                     config.getEquivQueryBound(), config.getSeed());
 
-            case SAMPLED_TESTS ->
-                new SampledTestsEQOracle<>(readTests(config, alphabet), sulOracle);
+            case SAMPLED_TESTS:
+                return new SampledTestsEQOracle<>(readTests(config, alphabet), sulOracle);
 
-            case WP_SAMPLED_TESTS ->
-                new WpSampledTestsEQOracle<>(
+            case WP_SAMPLED_TESTS:
+                return new WpSampledTestsEQOracle<>(
                     readTests(config, alphabet), sulOracle, config.getMinLength(),
                     config.getRandLength(), config.getSeed(), config.getEquivQueryBound());
 
-            default ->
+            default:
                 throw new RuntimeException("Equivalence algorithm " + algorithm + " is not supported");
-        };
+        }
     }
 
     /**
diff --git a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/oracles/CacheInconsistencyException.java b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/oracles/CacheInconsistencyException.java
index 4a1fea8..31dc808 100644
--- a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/oracles/CacheInconsistencyException.java
+++ b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/oracles/CacheInconsistencyException.java
@@ -2,8 +2,6 @@ package com.github.protocolfuzzing.protocolstatefuzzer.components.learner.oracle
 
 import net.automatalib.words.Word;
 
-import java.io.Serial;
-
 /**
  * Exception used by the {@link CachingSULOracle}.
  * <p>
@@ -12,7 +10,6 @@ import java.io.Serial;
  */
 public class CacheInconsistencyException extends NonDeterminismException {
 
-    @Serial
     private static final long serialVersionUID = 1L;
 
     /**
diff --git a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/oracles/NonDeterminismException.java b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/oracles/NonDeterminismException.java
index e829299..925b0c7 100644
--- a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/oracles/NonDeterminismException.java
+++ b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/oracles/NonDeterminismException.java
@@ -2,8 +2,6 @@ package com.github.protocolfuzzing.protocolstatefuzzer.components.learner.oracle
 
 import net.automatalib.words.Word;
 
-import java.io.Serial;
-
 /**
  * Exception used by {@link MultipleRunsSULOracle} and subclasses.
  * <p>
@@ -13,7 +11,6 @@ import java.io.Serial;
  */
 public class NonDeterminismException extends RuntimeException {
 
-    @Serial
     private static final long serialVersionUID = 1L;
 
     /** The input before the specified one in the constructor. */
diff --git a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/oracles/RemovalException.java b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/oracles/RemovalException.java
index ef05419..fc8a63d 100644
--- a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/oracles/RemovalException.java
+++ b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/oracles/RemovalException.java
@@ -1,13 +1,10 @@
 package com.github.protocolfuzzing.protocolstatefuzzer.components.learner.oracles;
 
-import java.io.Serial;
-
 /**
  * Exception used by the {@link ObservationTree}.
  */
 public class RemovalException extends RuntimeException {
 
-    @Serial
     private static final long serialVersionUID = 1L;
 
     /**
diff --git a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/statistics/Statistics.java b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/statistics/Statistics.java
index 397ce57..8696b1b 100644
--- a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/statistics/Statistics.java
+++ b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/statistics/Statistics.java
@@ -9,6 +9,7 @@ import java.io.StringWriter;
 import java.io.Writer;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.stream.Collectors;
 
 /**
  * Statistics collected over the learning process.
@@ -111,13 +112,13 @@ public class Statistics {
 
         if (!hypStats.isEmpty()) {
             pw.println("Number of inputs when hypothesis was generated: "
-                    + hypStats.stream().map(s -> s.getSnapshot().getInputs()).toList());
+                    + hypStats.stream().map(s -> s.getSnapshot().getInputs()).collect(Collectors.toList()));
 
             pw.println("Number of tests when hypothesis was generated: "
-                    + hypStats.stream().map(s -> s.getSnapshot().getTests()).toList());
+                    + hypStats.stream().map(s -> s.getSnapshot().getTests()).collect(Collectors.toList()));
 
             pw.println("Time (ms) when hypothesis was generated: "
-                    + hypStats.stream().map(s -> s.getSnapshot().getTime()).toList());
+                    + hypStats.stream().map(s -> s.getSnapshot().getTime()).collect(Collectors.toList()));
 
             List<HypothesisStatistics> invalidatedHypStates = new ArrayList<>(hypStats);
             if (invalidatedHypStates.get(invalidatedHypStates.size() - 1).getCounterexample() == null) {
@@ -125,13 +126,13 @@ public class Statistics {
             }
 
             pw.println("Number of inputs when counterexample was found: "
-                    + invalidatedHypStates.stream().map(s -> s.getCounterexampleSnapshot().getInputs()).toList());
+                    + invalidatedHypStates.stream().map(s -> s.getCounterexampleSnapshot().getInputs()).collect(Collectors.toList()));
 
             pw.println("Number of tests when counterexample was found: "
-                    + invalidatedHypStates.stream().map(s -> s.getCounterexampleSnapshot().getTests()).toList());
+                    + invalidatedHypStates.stream().map(s -> s.getCounterexampleSnapshot().getTests()).collect(Collectors.toList()));
 
             pw.println("Time (ms) when counterexample was found: "
-                    + invalidatedHypStates.stream().map(s -> s.getCounterexampleSnapshot().getTime()).toList());
+                    + invalidatedHypStates.stream().map(s -> s.getCounterexampleSnapshot().getTime()).collect(Collectors.toList()));
         }
         pw.close();
     }
diff --git a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/statistics/StatisticsTracker.java b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/statistics/StatisticsTracker.java
index 51cef27..a58e08f 100644
--- a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/statistics/StatisticsTracker.java
+++ b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/learner/statistics/StatisticsTracker.java
@@ -94,12 +94,12 @@ public class StatisticsTracker {
         stateWriter.flush();
 
         switch(newState) {
-            case FINISHED -> {
+            case FINISHED:
                 stateWriter.close();
                 stateWriter = null;
-            }
+            break;
 
-            case REFINEMENT -> {
+            case REFINEMENT:
                 if (statistics.getCounterexamples().isEmpty()) {
                     // do nothing if no counterexamples are found yet
                     return;
@@ -123,11 +123,10 @@ public class StatisticsTracker {
                 Word hypResponse = lastHypStats.getHypothesis().getMealyMachine().computeOutput(((Word) lastCe.getInput()));
 
                 stateWriter.printf("HYP Response: %s %n", hypResponse.toString());
-            }
+            break;
 
-            default -> {
+            default:
                 return;
-            }
         }
     }
 
diff --git a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/sul/core/config/InputResponseTimeoutMap.java b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/sul/core/config/InputResponseTimeoutMap.java
index acbb327..b8d27bb 100644
--- a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/sul/core/config/InputResponseTimeoutMap.java
+++ b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/sul/core/config/InputResponseTimeoutMap.java
@@ -1,6 +1,5 @@
 package com.github.protocolfuzzing.protocolstatefuzzer.components.sul.core.config;
 
-import java.io.Serial;
 import java.util.LinkedHashMap;
 
 /**
@@ -8,6 +7,5 @@ import java.util.LinkedHashMap;
  */
 public class InputResponseTimeoutMap extends LinkedHashMap<String, Long>{
 
-    @Serial
     private static final long serialVersionUID = 1L;
 }
diff --git a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/sul/mapper/abstractsymbols/NameToAbstractSymbol.java b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/sul/mapper/abstractsymbols/NameToAbstractSymbol.java
index 17f106b..3ecc39e 100644
--- a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/sul/mapper/abstractsymbols/NameToAbstractSymbol.java
+++ b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/components/sul/mapper/abstractsymbols/NameToAbstractSymbol.java
@@ -1,6 +1,5 @@
 package com.github.protocolfuzzing.protocolstatefuzzer.components.sul.mapper.abstractsymbols;
 
-import java.io.Serial;
 import java.util.Collection;
 import java.util.LinkedHashMap;
 
@@ -11,7 +10,6 @@ import java.util.LinkedHashMap;
  */
 public class NameToAbstractSymbol<AS extends AbstractSymbol> extends LinkedHashMap<String, AS>{
 
-    @Serial
     private static final long serialVersionUID = 1L;
 
     /**
diff --git a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/statefuzzer/testrunner/core/TestParser.java b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/statefuzzer/testrunner/core/TestParser.java
index 7d604b1..60b7378 100644
--- a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/statefuzzer/testrunner/core/TestParser.java
+++ b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/statefuzzer/testrunner/core/TestParser.java
@@ -13,6 +13,7 @@ import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
 import java.nio.charset.StandardCharsets;
 import java.util.*;
+import java.util.stream.Collectors;
 
 /**
  * Reads and writes tests from/to files.
@@ -110,8 +111,7 @@ public class TestParser {
         List<String> inputStrings = parseTestFile(filename);
         List<String> flattenedInputStrings = inputStrings.stream()
                 .map(i -> i.startsWith("@") ? new String[]{i} : i.split("\\s+"))
-                .flatMap(Arrays::stream)
-                .toList();
+                .flatMap(Arrays::stream).collect(Collectors.toList());
 
         List<Word<AbstractInput>> tests = new ArrayList<>();
         List<String> currentTestStrings = new ArrayList<>();
diff --git a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/statefuzzer/testrunner/timingprobe/ProbeException.java b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/statefuzzer/testrunner/timingprobe/ProbeException.java
index cb42a10..7b05eb6 100644
--- a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/statefuzzer/testrunner/timingprobe/ProbeException.java
+++ b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/statefuzzer/testrunner/timingprobe/ProbeException.java
@@ -1,13 +1,10 @@
 package com.github.protocolfuzzing.protocolstatefuzzer.statefuzzer.testrunner.timingprobe;
 
-import java.io.Serial;
-
 /**
  * Exception used by the TimingProbe.
  */
 public class ProbeException extends Exception {
 
-    @Serial
     private static final long serialVersionUID = 1L;
 
     /**
diff --git a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/utils/AutomatonUtils.java b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/utils/AutomatonUtils.java
index 27e161f..208ab0f 100644
--- a/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/utils/AutomatonUtils.java
+++ b/src/main/java/com/github/protocolfuzzing/protocolstatefuzzer/utils/AutomatonUtils.java
@@ -3,8 +3,13 @@ package com.github.protocolfuzzing.protocolstatefuzzer.utils;
 import net.automatalib.automata.UniversalDeterministicAutomaton;
 import net.automatalib.words.Word;
 
-import java.io.Serial;
-import java.util.*;
+import java.util.ArrayDeque;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.Queue;
+import java.util.Set;
 
 /**
  * Collection of automata related methods and classes.
@@ -250,7 +255,6 @@ public class AutomatonUtils {
      * @param <I>        the type of inputs
      */
     public static class PredMap <S,I> extends LinkedHashMap<S, Collection<PredStruct<S, I>>>{
-        @Serial
         private static final long serialVersionUID = 1L;
     }
 
