diff -ruN TLS-Attacker/TLS-Core/src/main/java/de/rub/nds/tlsattacker/core/dtls/FragmentManager.java TLS-Attacker_patched/TLS-Core/src/main/java/de/rub/nds/tlsattacker/core/dtls/FragmentManager.java
--- TLS-Attacker/TLS-Core/src/main/java/de/rub/nds/tlsattacker/core/dtls/FragmentManager.java	2025-02-08 16:56:41.298359978 +0100
+++ TLS-Attacker_patched/TLS-Core/src/main/java/de/rub/nds/tlsattacker/core/dtls/FragmentManager.java	2025-02-08 02:35:10.080387775 +0100
@@ -23,7 +23,6 @@
 
     private Map<FragmentKey, FragmentCollector> fragments;
     private Config config;
-    private int lastInterpretedMessageSeq = -1;
 
     public FragmentManager(Config config) {
         fragments = new HashMap<>();
@@ -69,21 +68,6 @@
             boolean onlyIfComplete, boolean skipMessageSequences) {
         List<DtlsHandshakeMessageFragment> handshakeFragmentList = new LinkedList<>();
         List<FragmentKey> orderedFragmentKeys = new ArrayList<>(fragments.keySet());
-        orderedFragmentKeys.sort(
-                new Comparator<FragmentKey>() {
-                    @Override
-                    public int compare(FragmentKey fragmentKey1, FragmentKey fragmentKey2) {
-                        if (fragmentKey1.getEpoch() > fragmentKey2.getEpoch()) {
-                            return -1;
-                        } else if (fragmentKey1.getEpoch() < fragmentKey2.getEpoch()) {
-                            return 1;
-                        } else {
-                            return fragmentKey1
-                                    .getMessageSeq()
-                                    .compareTo(fragmentKey2.getMessageSeq());
-                        }
-                    }
-                });
 
         for (FragmentKey key : orderedFragmentKeys) {
             FragmentCollector fragmentCollector = fragments.get(key);
@@ -100,11 +84,6 @@
                 }
             }
             if (!fragmentCollector.isInterpreted()) {
-                if (!skipMessageSequences
-                        && key.getMessageSeq() != lastInterpretedMessageSeq + 1
-                        && !fragmentCollector.isRetransmission()) {
-                    break;
-                }
                 if (onlyIfComplete && !fragmentCollector.isMessageComplete()) {
                     LOGGER.debug(
                             "Incomplete message. Not processing: msg_sqn: "
@@ -114,7 +93,7 @@
                 } else {
                     handshakeFragmentList.add(fragmentCollector.buildCombinedFragment());
                     fragmentCollector.setInterpreted(true);
-                    lastInterpretedMessageSeq = key.getMessageSeq();
+                    clearFragmentedMessage(key.getMessageSeq(), key.getEpoch());
                 }
             }
         }
diff -ruN TLS-Attacker/TLS-Core/src/main/java/de/rub/nds/tlsattacker/core/layer/context/TlsContext.java TLS-Attacker_patched/TLS-Core/src/main/java/de/rub/nds/tlsattacker/core/layer/context/TlsContext.java
--- TLS-Attacker/TLS-Core/src/main/java/de/rub/nds/tlsattacker/core/layer/context/TlsContext.java	2025-02-08 02:29:25.443282294 +0100
+++ TLS-Attacker_patched/TLS-Core/src/main/java/de/rub/nds/tlsattacker/core/layer/context/TlsContext.java	2025-02-08 17:31:48.355691568 +0100
@@ -60,6 +60,7 @@
 import de.rub.nds.tlsattacker.core.state.session.TicketSession;
 import de.rub.nds.tlsattacker.core.workflow.chooser.Chooser;
 import de.rub.nds.tlsattacker.transport.ConnectionEndType;
+import de.rub.nds.x509attacker.constants.X509PublicKeyType;
 import de.rub.nds.x509attacker.context.X509Context;
 import de.rub.nds.x509attacker.x509.X509CertificateChain;
 import jakarta.xml.bind.annotation.XmlAccessType;
@@ -73,6 +74,7 @@
 import java.util.List;
 import java.util.Random;
 import java.util.Set;
+import org.apache.commons.lang3.NotImplementedException;
 
 /** Holds all runtime variables of the TLSLayer. */
 @XmlAccessorType(XmlAccessType.FIELD)
@@ -522,6 +524,60 @@
         context.setTlsContext(this);
         init();
     }
+
+    public TlsContext(Context context, Config config) {
+        super(context);
+        clientX509Context = new X509Context();
+        serverX509Context = new X509Context();
+
+        X509PublicKeyType publicKeyType =
+                config.getCertificateChainConfig().get(0).getPublicKeyType();
+        if (publicKeyType == X509PublicKeyType.RSA) {
+            // Client RSA
+            clientX509Context.setSubjectRsaModulus(
+                    config.getCertificateChainConfig().get(0).getRsaModulus());
+            clientX509Context.setSubjectRsaPrivateKey(
+                    config.getCertificateChainConfig().get(0).getRsaPrivateKey());
+            clientX509Context.setSubjectRsaPublicExponent(
+                    config.getCertificateChainConfig().get(0).getRsaPublicExponent());
+            // Server RSA
+            serverX509Context.setSubjectRsaModulus(
+                    config.getCertificateChainConfig().get(0).getRsaModulus());
+            serverX509Context.setSubjectRsaPrivateKey(
+                    config.getCertificateChainConfig().get(0).getRsaPrivateKey());
+            serverX509Context.setSubjectRsaPublicExponent(
+                    config.getCertificateChainConfig().get(0).getRsaPublicExponent());
+        } else if (publicKeyType == X509PublicKeyType.ECDH_ECDSA) {
+            // Client EC
+            clientX509Context.setSubjectEcPrivateKey(
+                    config.getCertificateChainConfig().get(0).getEcPrivateKey());
+            clientX509Context.setSubjectEcPublicKey(
+                    config.getCertificateChainConfig().get(0).getEcPublicKey());
+            clientX509Context.setSubjectNamedCurve(
+                    config.getCertificateChainConfig().get(0).getDefaultSubjectNamedCurve());
+            clientX509Context.setSubjectPublicKeyType(
+                    config.getCertificateChainConfig().get(0).getPublicKeyType());
+            clientX509Context.setSubjectSignatureAlgorithm(
+                    config.getCertificateChainConfig().get(0).getDefaultSignatureAlgorithm());
+            // Server EC
+            serverX509Context.setSubjectEcPrivateKey(
+                    config.getCertificateChainConfig().get(0).getEcPrivateKey());
+            serverX509Context.setSubjectEcPublicKey(
+                    config.getCertificateChainConfig().get(0).getEcPublicKey());
+            serverX509Context.setSubjectNamedCurve(
+                    config.getCertificateChainConfig().get(0).getDefaultSubjectNamedCurve());
+            serverX509Context.setSubjectPublicKeyType(
+                    config.getCertificateChainConfig().get(0).getPublicKeyType());
+            serverX509Context.setSubjectSignatureAlgorithm(
+                    config.getCertificateChainConfig().get(0).getDefaultSignatureAlgorithm());
+        } else {
+            throw new NotImplementedException(
+                    "You may forget to add corresponding patch for TLS-Attacker publicKeyType: "
+                            + publicKeyType.name());
+        }
+        context.setTlsContext(this);
+        init();
+    }
 
     public List<SrtpProtectionProfile> getClientSupportedSrtpProtectionProfiles() {
         return this.clientSupportedSrtpProtectionProfiles;
diff -ruN TLS-Attacker/TLS-Core/src/main/java/de/rub/nds/tlsattacker/core/protocol/preparator/CertificateMessagePreparator.java TLS-Attacker_patched/TLS-Core/src/main/java/de/rub/nds/tlsattacker/core/protocol/preparator/CertificateMessagePreparator.java
--- TLS-Attacker/TLS-Core/src/main/java/de/rub/nds/tlsattacker/core/protocol/preparator/CertificateMessagePreparator.java	2025-02-08 02:29:25.443282294 +0100
+++ TLS-Attacker_patched/TLS-Core/src/main/java/de/rub/nds/tlsattacker/core/protocol/preparator/CertificateMessagePreparator.java	2025-02-08 22:50:18.692731360 +0100
@@ -114,7 +114,8 @@
 
             case X509:
                 List<CertificateEntry> entryList = msg.getCertificateEntryList();
-                if (chooser.getConfig().getDefaultExplicitCertificateChain() == null) {
+                if (chooser.getConfig().getDefaultExplicitCertificateChain() == null
+                        || entryList != null) {
                     if (entryList == null) {
                         if (chooser.getConfig().getAutoAdjustCertificate()) {
                             X509PublicKeyType[] certificateKeyTypes =
@@ -223,7 +224,6 @@
                 prepareCert(entryList, x509Context, certConfig, i);
             }
         }
-        chooser.getContext().getTlsContext().setTalkingX509Context(x509Context);
     }
 
     private void prepareCert(
diff -ruN TLS-Attacker/TLS-Core/src/main/java/de/rub/nds/tlsattacker/core/state/Context.java TLS-Attacker_patched/TLS-Core/src/main/java/de/rub/nds/tlsattacker/core/state/Context.java
--- TLS-Attacker/TLS-Core/src/main/java/de/rub/nds/tlsattacker/core/state/Context.java	2025-02-08 02:29:25.443282294 +0100
+++ TLS-Attacker_patched/TLS-Core/src/main/java/de/rub/nds/tlsattacker/core/state/Context.java	2025-02-08 00:57:42.272011120 +0100
@@ -168,7 +168,7 @@
     }
 
     public void prepareWithLayers(StackConfiguration type) {
-        tlsContext = new TlsContext(this);
+        tlsContext = new TlsContext(this, config);
         httpContext = new HttpContext(this);
         tcpContext = new TcpContext(this);
         quicContext = new QuicContext(this);
