/**
 * TLS-Attacker - A Modular Penetration Testing Framework for TLS
 *
 * Copyright 2014-2017 Ruhr University Bochum / Hackmanit GmbH
 *
 * Licensed under Apache License 2.0
 * http://www.apache.org/licenses/LICENSE-2.0
 */
package de.rub.nds.tlsattacker.core.protocol.preparator;

import de.rub.nds.modifiablevariable.util.ArrayConverter;
import de.rub.nds.tlsattacker.core.certificate.CertificateKeyPair;
import de.rub.nds.tlsattacker.core.constants.CipherSuite;
import de.rub.nds.tlsattacker.core.constants.HandshakeMessageType;
import de.rub.nds.tlsattacker.core.constants.ProtocolVersion;
import de.rub.nds.tlsattacker.core.crypto.keys.CustomRSAPrivateKey;
import de.rub.nds.tlsattacker.core.protocol.message.CertificateMessage;
import de.rub.nds.tlsattacker.core.state.TlsContext;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.bouncycastle.crypto.tls.Certificate;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.Test;

public class CertificateMessagePreparatorTest {

    private static final Logger LOGGER = LogManager.getLogger();

    private static final ProtocolVersion[] PROTOCOLS = { ProtocolVersion.SSL3, ProtocolVersion.TLS10,
            ProtocolVersion.TLS11, ProtocolVersion.TLS12 };

    private TlsContext context;

    @Before
    public void setUp() {
        context = new TlsContext();
        context.setSelectedCipherSuite(CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA);
    }

    /**
     * Test of prepareHandshakeMessageContents method, of class
     * CertificateMessagePreparator.
     *
     * @throws java.io.IOException
     */
    @Test
    public void testPrepare() throws IOException {
        for (ProtocolVersion version : PROTOCOLS) {
            context.setSelectedProtocolVersion(version);
            final CertificateMessage message = new CertificateMessage(context.getConfig());
            Certificate cert = Certificate
                    .parse(new ByteArrayInputStream(
                            ArrayConverter
                                    .hexStringToByteArray
            final CertificateMessagePreparator preparator = new CertificateMessagePreparator(context.getChooser(),
                    message);
            context.getConfig().setDefaultExplicitCertificateKeyPair(
                    new CertificateKeyPair(cert, new CustomRSAPrivateKey(context.getConfig()
                            .getDefaultClientRSAModulus(), context.getConfig().getDefaultClientRSAPrivateKey())));
            context.getConfig().setAutoSelectCertificate(false);
            preparator.prepare();
            LOGGER.debug("Certificate in msg after preparation: "
                    + ArrayConverter.bytesToHexString(message.getCertificatesListBytes(), false, false));
            assertArrayEquals(
                    message.getCertificatesListBytes().getValue(),
                    ArrayConverter
                            .hexStringToByteArray
            assertTrue(message.getCertificatesListLength().getValue() == 0x000397);
            assertTrue(message.getType().getValue() == HandshakeMessageType.CERTIFICATE.getValue());
            assertTrue(message.getLength().getValue() == 0x00039A);
        }
    }

    @Test
    public void testNoContextPrepare() {
        for (ProtocolVersion version : PROTOCOLS) {
            context.setSelectedProtocolVersion(version);
            final CertificateMessage message = new CertificateMessage(context.getConfig());
            final CertificateMessagePreparator preparator = new CertificateMessagePreparator(context.getChooser(),
                    message);
            preparator.prepare();
        }
    }
}
